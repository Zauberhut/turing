# Turing Maschine by Christian und Peter

# 1. Der unendliche Papierstreifen wird als Klasse definiert
class Tape(object):
    blank_symbol = " "

    # Der Papierstreifen wird als Dictionary definiert ... (Dictionaries sind im Gegensatz zu Listen unendlich
    def __init__(self,input=""):
        self.__tape = {}
        # ... und mit der Eingabe gefuellt
        for i in range(len(input)):
            self.__tape[i] = input[i]

    def __str__(self):
        s = ""
        min_used_index = min(self.__tape.keys())
        max_used_index = max(self.__tape.keys())
        for i in range(min_used_index, max_used_index):
            s += self.__tape[i]
        return s

    # Die Variable um den Zustand des Bandes zu lesen
    def __getitem__(self, index):
        if index in self.__tape:
            return self.__tape[index]
        else:
            return blank_symbol

    # Die Variable um den Zustand des Bandes zu schreiben
    def __setitem__(self, pos, char):
        self.__tape[pos] = char

# zuerst wird die Logik dieser Turing Maschine definiert


# das siebenteilige Tupel wird fuer diese Maschine definiert
class TuringMachine(object):
    def __init__(self,
                 tape="",  # Das leere Band wird definiert
                 # dieses Band kann die Zustaende  (leer), 0 und 1 haben
                 blank_symbol=" ",
                 tape_alphabet=["0", "1"],
                 # Der Anfangsstatus
                 initial_state="",
                 # Die akzeptierten Status 'init' und 'final'
                 accepting_states=[],
                 # der Endstatus
                 final_states=[],
                 # die Verhaltensregeln werden eingelesen
                 transition_function={}):
        self.__tape = Tape(tape)
        # die Position des Bandes wird definiert
        self.__head_position = 0
        self.__blank_symbol = blank_symbol
        # Der Anfangsstatus wird definiert
        self.__current_state = initial_state
        self.__transition_function = transition_function
        self.__tape_alphabet = tape_alphabet
        self.__final_states = final_states

    # Die Funktion fuer die Ausgabe
    def show_tape(self):
        print(self.__tape)
        return True

    # Definierte Verhaltensweise wird angewendet
    def step(self):
        char_under_head = self.__tape[self.__head_position]
        x = (self.__current_state, char_under_head)
        if x in self.__transition_function:
            y = self.__transition_function[x]
            # Definition der Bewegung des Lese-/Schreibkopfes
            self.__tape[self.__head_position] = y[1]
            if y[2] == "R":
                self.__head_position += 1
            elif y[2] == "L":
                self.__head_position -= 1
            self.__current_state = y[0]

    # Definition wann der Endzustand der TM erreicht ist
    def final(self):
        if self.__current_state in self.__final_states:
            return True
        else:
            return False



# Anwendung der TM



initial_state = "init",
accepting_states = ["final"],
# Die drei Verhaltensweisen werden definiert:
transition_function = {
    # Wenn 0 gelesen:
    # setze Zustand auf 'init', schreibe 1 und gehe nach rechts

    ("init", "0"): ("init", "1", "R"),
                       # Wenn '1' gelesen
                       # setze Zustand auf 'init', schreibe 0 und gehe nach rechts
    ("init", "1"): ("init", "0", "R"),
                       # Wenn ' ' gelesen,
                       # setze Zustand auf 'final', schreibe ' ', bleibe stehen
    ("init", " "): ("final", " ", "N"),
                       }
final_states = ["final"]
# Der Startstatus wird definiert
# eingabe = input("Bitte geben Sie eine beliebig lange Zeichenkette von Nullen und Einsen (0/1) ein. Diese Turingmaschine kann Sie invertieren")

t = TuringMachine("00101100 ",
                    initial_state="init",
                    final_states=final_states,
                    transition_function=transition_function)

print("Eingabe auf dem Band:")
t.show_tape()
print ("\nratterratterratter ...")

while not t.final():
    t.step()
    t.show_tape()  # Die einzelnen Schritte werden angezeigt


print("\nAusgabe auf dem Band:")
t.show_tape()
